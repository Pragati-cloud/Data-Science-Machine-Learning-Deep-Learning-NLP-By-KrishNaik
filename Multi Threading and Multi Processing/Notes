# Multithreading & Multiprocessing Notes

ðŸ”¹ Key Concepts

- Process
  A process is an instance of a program that is being executed.  
  Example: Running `python script.py` starts a new process.  

- Program
  A program is a sequence of instructions written in a programming language.  
  It is a *passive entity* stored on disk (e.g., `.exe`, `.py`, `.c` files).  

- Thread
  A thread is the smallest unit of execution within a process.  
  Multiple threads can exist within the same process, sharing resources like memory but running independently.  


ðŸ”¹ Difference Between Process and Thread

| Feature            | Process | Thread |
|--------------------|---------|--------|
| Definition         | Instance of a program in execution | Unit of execution within a process |
| Memory             | Each process has its own memory space | Threads share the same memory space |
| Communication      | Inter-process communication is slower | Intra-process communication is faster |
| Creation Overhead  | High (more resources required) | Low (lightweight) |
| Dependency         | Independent | Dependent on process |


ðŸ”¹ Memory Layout of a Process

A process in memory is divided into the following segments:

| Segment       | Description |
|---------------|-------------|
| Code Segment (Text Segment) | Contains the program instructions (machine code). |
| Data Segment | Stores global and static variables. |
| Heap | Dynamically allocated memory during runtime (`malloc`, `new`). |
| Stack | Stores local variables, function calls, return addresses. |
| Registers | Small storage locations in CPU for fast access (e.g., Program Counter, Stack Pointer). |

